version: 2

gcloud-configuration: &gcloud-configuration
  docker:
    - image: google/cloud-sdk:latest
  environment:
    - APP_NAME: 'wizz-vis'

aliases:
  &build-enterprise |
  printf "Triggering Wizz-Vis Enterprise build\n\n"
  BUILD_INFO=$(curl -X POST -H -d \
      "{}" \
      "https://circleci.com/api/v1/project/$ORGANIZATION/$ENTERPRISE_PROJECT/tree/$CIRCLE_BRANCH?circle-token=$CIRCLE_TOKEN")
  printf "\n\nBuild triggered\n\n"
  printf "Follow the progress of the build on \nhttps://circleci.com/gh/$ORGANIZATION/$ENTERPRISE_PROJECT/tree/$CIRCLE_BRANCH"

jobs:
  test:
    docker:
      - image: ruby:2.5.0-slim
        environment:
          BUNDLE_PATH: vendor/bundle
          DB_HOST: 127.0.0.1
          DB_USER: test_user
          DB_PASSWORD: test_password
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/wizz_in_test?encoding=utf8
          RAILS_ENV: test
      - image: circleci/postgres:9
        environment:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
    working_directory: /wizz-vis
    steps:
      - checkout
      - run:
          name: Dependencies Install
          command: |
              apt-get update; \
              apt-get install -y --no-install-recommends build-essential \
                git curl gnupg2 ruby-dev libpq-dev nodejs yarn wget
      - run:
          name: install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \
            tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0
      - run:
          name: Update bundler gem
          command: gem install bundler
      # Restore bundle cache
      - restore_cache:
          keys:
            - wizz-vis-v2-bundle-{{ checksum "Gemfile.lock" }}
            - wizz-vis-v2-bundle-
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      # Store bundle cache
      - save_cache:
          key: wizz-vis-v2-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:setup --trace
      # Run rspec in parallel
      - run:
          name: Gem Vulnerabilities
          command: |
            bundle exec bundle audit check --update
      - run:
          name: RSpec
          command: |
            bundle exec rspec
      - store_artifacts:
          path: coverage/

  build:
    docker:
      - image: circleci/buildpack-deps:yakkety-curl
    environment:
      - APP_NAME: 'wizz-vis'
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          key: wizz-vis-docker-cache-
      - run:
          name: Docker load if exists
          command: |
            if [ -f caches/${APP_NAME}.tgz ]; then
              zcat caches/${APP_NAME}.tgz | docker load
            fi
      - run:
          name: Include commit file
          command: |
            git log --format="%H" -n 1 > COMMIT
      - run:
          name: Build application Docker image
          command: |
            docker build -t ${APP_NAME} .
            mkdir -p caches
      - run:
          name: Save docker images and histories
          command: |
            docker_images=$(docker images --filter 'dangling=false' \
              --format '{{.Repository}}:{{.Tag}}')
            docker_histories=$(for i in ${docker_images}; \
              do docker history -q $i | grep -v missing; \
            done)
            docker save ${docker_images} ${docker_histories} \
              | gzip > caches/${APP_NAME}.tgz
      - save_cache:
          key: wizz-vis-docker-cache-{{ checksum "caches/wizz-vis.tgz" }}
          paths:
            - caches/wizz-vis.tgz
      - persist_to_workspace:
          root: caches
          paths:
            - wizz-vis.tgz

  deploy:
    <<: *gcloud-configuration
    steps:
      - attach_workspace:
          at: caches
      - setup_remote_docker
      - run:
          name: Load docker images
          command: zcat caches/${APP_NAME}.tgz | docker load
      - run:
          name: Config gcloud
          command: |
            set +o pipefail
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
      - run:
          name: Tag master
          command: |
            docker tag ${APP_NAME}:latest gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:latest
      - run:
          name: Push latest image to Google Cloud Registry
          command: |
            gcloud auth configure-docker --quiet
            docker push gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:latest
      - run:
          name: Push lastest image to Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag ${APP_NAME}:latest ${DOCKER_ORGANIZATION}/${APP_NAME}:latest
            docker push ${DOCKER_ORGANIZATION}/${APP_NAME}:latest

  tagged-deploy:
    <<: *gcloud-configuration
    steps:
      - attach_workspace:
          at: caches
      - setup_remote_docker
      - run:
          name: Load docker images
          command: zcat caches/${APP_NAME}.tgz | docker load
      - run:
          name: Config gcloud
          command: |
            set +o pipefail
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
      - run:
          name: Tag stable
          command: |
            docker tag ${APP_NAME}:latest gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:stable
      - run:
          name: Push stable to Google Cloud Registry
          command: |
            gcloud auth configure-docker --quiet
            docker push gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:stable
      - run:
          name: Push stable and tagged image to Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker tag ${APP_NAME}:latest ${DOCKER_ORGANIZATION}/${APP_NAME}:stable
            docker push ${DOCKER_ORGANIZATION}/${APP_NAME}:stable
            docker tag ${DOCKER_ORGANIZATION}/${APP_NAME}:stable ${DOCKER_ORGANIZATION}/${APP_NAME}:${CIRCLE_TAG#?}
      - run:
          name: Tag versioned image in the registry
          command: |
            gcloud container images add-tag gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:stable gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:${CIRCLE_TAG#?}

  build-enterprise:
    <<: *gcloud-configuration
    steps:
      - run:
          name: Triggering Wizz-Vis Enterprise build
          command: *build-enterprise

  build-tagged-enterprise:
    <<: *gcloud-configuration
    steps:
      - run:
          name: Triggering Wizz-Vis Enterprise build
          command: *build-enterprise

workflows:
  version: 2
  build-n-deploy:
    jobs:
      - test:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - test
          filters:
            branches:
              only: master
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - tagged-deploy:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - build-enterprise:
          requires:
            - deploy
          filters:
            branches:
              only: master
      - build-tagged-enterprise:
          requires:
            - tagged-deploy
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
